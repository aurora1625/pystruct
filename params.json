{"name":"Pystruct","tagline":"Simple structured learning framework for python","body":"PyStruct\r\n========\r\n\r\nThis is my humble structural SVM and CRF implementation.\r\nI use it for my research and hope you find it helpful.\r\nBe aware that it might change drastically.\r\n\r\nThere are three basic parts to the implementation.\r\n\r\nStructural SVMs\r\n---------------\r\nKnows about learning.\r\n\r\nThese implement max margin learning, similar to SVM^struct.\r\nThere is a subgradient and a QP version. \r\nThey are not particularly optimized but at this part is usually not the\r\nbottleneck in structured learning, so the is not really an issue. It is\r\npossible to put positivity constraints on certain weight.\r\nThere is also a simple perceptron.\r\n\r\n\r\nCRFs aka Problems\r\n-----------------\r\nKnows about the problem.\r\n\r\nThese know about the structure of the problem, the loss and the inference.\r\nThis is basically the part that you have to write yourself when using the\r\nPython interface in SVM^struct.\r\nI am only working on pairwise models and there is support for grids and\r\ngeneral graphs. I am mostly working on the grids at the moment.\r\n\r\n\r\nInference Solvers\r\n-----------------\r\nDoes the inference.\r\n\r\nThere are some options to use different solvers for inference.\r\nA linear programming solver using GLPK is included.\r\nI have Python interfaces for several other methods on github,\r\nincluding LibDAI, QPBO, AD3 and GCO (submodular graph cuts).\r\n\r\nThis is where the heavy lifting is done and in some sense these backends\r\nare exchangeable. I'm hoping to unify stuff a bit more here.\r\n\r\n\r\nRemarks\r\n-------\r\nThere is also some stuff on latent SVMs here that is my current research and\r\nI'd ask you not to steal it ;)\r\n\r\nFor updates, read my blog at http://peekaboo-vision.blogspot.com\r\n\r\nThere are not publications yet that you can cite for this, I'm hoping there\r\nwill be some in the future.\r\n\r\nBtw: this is research with unit tests!\r\n\r\n\r\nInstallation\r\n============\r\nThere is no need to compile anything, this pure Python.\r\nThere are quite a couple of requirements, though:\r\n\r\n* You need cvxopt for the cutting plane SVM solver and linear programming inference.\r\n  By default I use the glpk solver for the LP, so you need that, too, if you want to use LP inference.\r\n\r\n* You need sklearn for some tidbits here and there, also I import joblib from sklearn.\r\n\r\n* For the other inference algorithms that are wrapped in the inference folder,\r\n  you need the following of my repositories. You can just pick and choose from\r\n  those, but lack of methods will make some tests fail.\r\n\r\n  QPBO\r\n    https://github.com/amueller/pyqpbo\r\n\r\n  libdai\r\n    https://github.com/amueller/daimrf\r\n\r\n  AD3\r\n    https://github.com/amueller/AD3\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}